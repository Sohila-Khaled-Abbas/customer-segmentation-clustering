{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "cf6d8a05-535d-47b0-b62c-104606ccfb6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ðŸ“¡ Flask API for Customer Segmentation Project\n",
    "\n",
    "from flask import Flask, jsonify, request\n",
    "from flask_cors import CORS\n",
    "import psycopg2\n",
    "import pandas as pd\n",
    "\n",
    "# ----------------------------\n",
    "# Flask App & Config\n",
    "# ----------------------------\n",
    "app = Flask(__name__)\n",
    "CORS(app)  # Enable CORS for all routes\n",
    "\n",
    "# ----------------------------\n",
    "# Database Connection\n",
    "# ----------------------------\n",
    "def get_connection():\n",
    "    return psycopg2.connect(\n",
    "        host=\"localhost\",\n",
    "        database=\"customer_bi\",\n",
    "        user=\"postgres\",\n",
    "        password=\"203010\"\n",
    "    )\n",
    "\n",
    "# ----------------------------\n",
    "# API Endpoint: /customers\n",
    "# ----------------------------\n",
    "@app.route('/customers', methods=['GET'])\n",
    "def get_customers():\n",
    "    # Parse query params\n",
    "    segment = request.args.get('segment')\n",
    "    min_income = request.args.get('min_income', type=float)\n",
    "    max_income = request.args.get('max_income', type=float)\n",
    "\n",
    "    # Build SQL with filters\n",
    "    query = \"SELECT * FROM vw_customer_segmentation_enriched WHERE 1=1\"\n",
    "    filters = []\n",
    "    if segment:\n",
    "        filters.append(f\" segment = '{segment}' \")\n",
    "    if min_income:\n",
    "        filters.append(f\" annual_income >= {min_income} \")\n",
    "    if max_income:\n",
    "        filters.append(f\" annual_income <= {max_income} \")\n",
    "    if filters:\n",
    "        query += \" AND \" + \" AND \".join(filters)\n",
    "\n",
    "    # Query DB\n",
    "    conn = get_connection()\n",
    "    df = pd.read_sql_query(query, conn)\n",
    "    conn.close()\n",
    "\n",
    "    # Return JSON\n",
    "    return jsonify(df.to_dict(orient='records'))\n",
    "\n",
    "# ----------------------------\n",
    "# Health Check\n",
    "# ----------------------------\n",
    "@app.route('/')\n",
    "def index():\n",
    "    return jsonify({\"message\": \"Customer Segmentation API is running ðŸš€\"})\n",
    "\n",
    "# ----------------------------\n",
    "# Run the API\n",
    "# ----------------------------\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True, port=5000)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
