{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "890a1419-6747-44ad-8bb7-aad74872ccc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# üìä Streamlit App: Customer Segmentation & Clustering\n",
    "# Author: Sohila Khaled\n",
    "# Version: Clean with SQLAlchemy\n",
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "import plotly.express as px\n",
    "\n",
    "# ----------------------------\n",
    "# 1Ô∏è‚É£ Page Config\n",
    "# ----------------------------\n",
    "st.set_page_config(\n",
    "    page_title=\"Customer Segmentation Dashboard\",\n",
    "    page_icon=\"üìä\",\n",
    "    layout=\"wide\"\n",
    ")\n",
    "\n",
    "st.title(\"üìä Customer Segmentation & Clustering ‚Äî Streamlit App\")\n",
    "\n",
    "# ----------------------------\n",
    "# 2Ô∏è‚É£ SQLAlchemy Connection\n",
    "# ----------------------------\n",
    "@st.cache_resource\n",
    "def get_engine():\n",
    "    engine = create_engine(\n",
    "        \"postgresql+psycopg2://postgres:203010@localhost:5432/customer_bi\"\n",
    "    )\n",
    "    return engine\n",
    "\n",
    "engine = get_engine()\n",
    "\n",
    "# ----------------------------\n",
    "# 3Ô∏è‚É£ Load Data\n",
    "# ----------------------------\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    query = \"SELECT * FROM vw_customer_segmentation_enriched\"\n",
    "    df = pd.read_sql_query(query, engine)\n",
    "    return df\n",
    "\n",
    "df = load_data()\n",
    "\n",
    "# ----------------------------\n",
    "# 4Ô∏è‚É£ Sidebar Filters\n",
    "# ----------------------------\n",
    "st.sidebar.header(\"üîç Filter Customers\")\n",
    "\n",
    "segments = st.sidebar.multiselect(\n",
    "    \"Segments:\",\n",
    "    options=df['segment'].unique(),\n",
    "    default=df['segment'].unique()\n",
    ")\n",
    "\n",
    "income_range = st.sidebar.slider(\n",
    "    \"Annual Income Range (k$):\",\n",
    "    int(df['annual_income'].min()),\n",
    "    int(df['annual_income'].max()),\n",
    "    (\n",
    "        int(df['annual_income'].min()),\n",
    "        int(df['annual_income'].max())\n",
    "    )\n",
    ")\n",
    "\n",
    "spending_range = st.sidebar.slider(\n",
    "    \"Spending Score Range:\",\n",
    "    int(df['spending_score'].min()),\n",
    "    int(df['spending_score'].max()),\n",
    "    (\n",
    "        int(df['spending_score'].min()),\n",
    "        int(df['spending_score'].max())\n",
    "    )\n",
    ")\n",
    "\n",
    "# Apply filters\n",
    "df_filtered = df[\n",
    "    (df['segment'].isin(segments)) &\n",
    "    (df['annual_income'].between(*income_range)) &\n",
    "    (df['spending_score'].between(*spending_range))\n",
    "]\n",
    "\n",
    "# ----------------------------\n",
    "# 5Ô∏è‚É£ KPI Cards\n",
    "# ----------------------------\n",
    "total_customers = int(df_filtered.shape[0])\n",
    "avg_income = round(df_filtered['annual_income'].mean(), 2)\n",
    "avg_spending = round(df_filtered['spending_score'].mean(), 2)\n",
    "\n",
    "col1, col2, col3 = st.columns(3)\n",
    "col1.metric(\"üë• Total Customers\", f\"{total_customers}\")\n",
    "col2.metric(\"üí∞ Average Income (k$)\", f\"{avg_income}\")\n",
    "col3.metric(\"üõçÔ∏è Average Spending Score\", f\"{avg_spending}\")\n",
    "\n",
    "# ----------------------------\n",
    "# 6Ô∏è‚É£ Scatter Plot\n",
    "# ----------------------------\n",
    "st.subheader(\"üí° Income vs Spending Score by Segment\")\n",
    "\n",
    "fig = px.scatter(\n",
    "    df_filtered,\n",
    "    x=\"annual_income\",\n",
    "    y=\"spending_score\",\n",
    "    color=\"segment\",\n",
    "    size=\"spending_score\",\n",
    "    hover_data=['customer_id'],\n",
    "    title=\"Income vs. Spending Score\"\n",
    ")\n",
    "\n",
    "st.plotly_chart(fig, use_container_width=True)\n",
    "\n",
    "# ----------------------------\n",
    "# 7Ô∏è‚É£ Data Table\n",
    "# ----------------------------\n",
    "st.subheader(\"üìÑ Filtered Customer Data\")\n",
    "\n",
    "st.dataframe(df_filtered, use_container_width=True)\n",
    "\n",
    "# ----------------------------\n",
    "# 8Ô∏è‚É£ Download Button\n",
    "# ----------------------------\n",
    "st.download_button(\n",
    "    \"üì• Download CSV\",\n",
    "    df_filtered.to_csv(index=False).encode('utf-8'),\n",
    "    \"filtered_customers.csv\",\n",
    "    \"text/csv\"\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
